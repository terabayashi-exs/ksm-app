#!/usr/bin/env node

// ÂÖ®„Å¶„ÅÆË©¶Âêà„ÇíÁ¢∫Ë™ç„Åó„Å¶Ê±∫ÂãùTË©¶Âêà„ÇíÊé¢„Åô
import dotenv from 'dotenv';
import { createClient } from '@libsql/client';

dotenv.config({ path: '.env.local' });

const client = createClient({
  url: process.env.DATABASE_URL,
  authToken: process.env.DATABASE_AUTH_TOKEN
});

async function findFinalMatches() {
  try {
    console.log('üîç ÂÖ®„Å¶„ÅÆË©¶Âêà„ÇíÁ¢∫Ë™ç„Åó„Å¶Ê±∫ÂãùTË©¶Âêà„ÇíÊé¢„Åô...\n');
    
    // ÂÖ®Ë©¶ÂêàÁ¢∫Ë™ç
    const allMatches = await client.execute(`
      SELECT 
        match_code,
        team1_display_name,
        team2_display_name,
        team1_id,
        team2_id,
        match_block_id
      FROM t_matches_live
      ORDER BY match_code
    `);
    
    console.log(`ÂÖ®Ë©¶Âêà: ${allMatches.rows.length}‰ª∂`);
    
    // „Éñ„É≠„ÉÉ„ÇØ„Åî„Å®„Å´ÂàÜÈ°û
    const blockMatches = {};
    allMatches.rows.forEach(match => {
      const blockId = match.match_block_id;
      if (!blockMatches[blockId]) blockMatches[blockId] = [];
      blockMatches[blockId].push(match);
    });
    
    Object.keys(blockMatches).forEach(blockId => {
      console.log(`\n„Éñ„É≠„ÉÉ„ÇØ ${blockId}:`);
      blockMatches[blockId].forEach(match => {
        console.log(`  ${match.match_code}: ${match.team1_display_name} vs ${match.team2_display_name} (ID: ${match.team1_id || 'null'} vs ${match.team2_id || 'null'})`);
      });
    });
    
    // A1„ÉÅ„Éº„É†„ÄÅA2„ÉÅ„Éº„É†„ÅåÂê´„Åæ„Çå„ÇãË©¶Âêà„ÇíÊé¢„Åô
    console.log(`\nüéØ A1„ÉÅ„Éº„É†„ÄÅA2„ÉÅ„Éº„É†„ÅåÂê´„Åæ„Çå„ÇãË©¶Âêà:`);
    const aTeamMatches = allMatches.rows.filter(match => 
      match.team1_display_name && match.team1_display_name.includes('A') || 
      match.team2_display_name && match.team2_display_name.includes('A') ||
      match.team1_display_name && match.team1_display_name.includes('1‰Ωç') ||
      match.team2_display_name && match.team2_display_name.includes('1‰Ωç')
    );
    
    if (aTeamMatches.length > 0) {
      aTeamMatches.forEach(match => {
        console.log(`  ${match.match_code}: ${match.team1_display_name} vs ${match.team2_display_name}`);
      });
    } else {
      console.log('  Ë©≤ÂΩì„Åô„ÇãË©¶Âêà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    }
    
    // „Éñ„É≠„ÉÉ„ÇØÊÉÖÂ†±„ÇÇÁ¢∫Ë™ç
    console.log(`\nüìä „Éñ„É≠„ÉÉ„ÇØÊÉÖÂ†±:`);
    const blocks = await client.execute(`
      SELECT match_block_id, phase, display_round_name, block_name
      FROM t_match_blocks
      ORDER BY match_block_id
    `);
    
    blocks.rows.forEach(block => {
      console.log(`  „Éñ„É≠„ÉÉ„ÇØ${block.match_block_id}: ${block.phase} - ${block.display_round_name} (${block.block_name})`);
    });
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
  } finally {
    client.close();
  }
}

findFinalMatches();